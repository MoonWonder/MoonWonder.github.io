<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dsu - MoonWonder</title><link>https://moonwonder.top/posts/oi/algorithm/ds/</link><description>MoonWonder的博客</description><generator>Hugo 0.147.9 &amp; FixIt v0.4.0-alpha.2-20251023040336-063af2cd</generator><language>zh-CN</language><managingEditor>ybw051114@qq.com (MoonWonder)</managingEditor><webMaster>ybw051114@qq.com (MoonWonder)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 28 Oct 2025 09:28:15 +0800</lastBuildDate><atom:link href="https://moonwonder.top/posts/oi/algorithm/ds/index.xml" rel="self" type="application/rss+xml"/><item><title>SegmentTree_Divide</title><link>https://moonwonder.top/posts/oi/algorithm/ds/segmenttree_divide/</link><pubDate>Sat, 13 Feb 2021 11:22:34 +0800</pubDate><author>ybw051114@qq.com (MoonWonder)</author><guid>https://moonwonder.top/posts/oi/algorithm/ds/segmenttree_divide/</guid><description>&lt;h2 class="heading-element" id="线段树分治">&lt;span>线段树分治&lt;/span>
 &lt;a href="#%e7%ba%bf%e6%ae%b5%e6%a0%91%e5%88%86%e6%b2%bb" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>有的时候我们会碰到一类数据结构问题，它需要我们支持往集合中插入一个元素、删除一个元素、询问三个操作。如果我们发现，插入一个元素时信息很容易维护，但删除一个元素时就不那么容易了，那么我们可以考虑线段树分治，来离线解决这类在线算法不那么优秀的数据结构题。&lt;/p></description></item><item><title>dsu_on_tree</title><link>https://moonwonder.top/posts/oi/algorithm/ds/dsu_on_tree/</link><pubDate>Tue, 09 Feb 2021 19:03:41 +0800</pubDate><author>ybw051114@qq.com (MoonWonder)</author><guid>https://moonwonder.top/posts/oi/algorithm/ds/dsu_on_tree/</guid><description>&lt;h2 class="heading-element" id="算法介绍">&lt;span>算法介绍&lt;/span>
 &lt;a href="#%e7%ae%97%e6%b3%95%e4%bb%8b%e7%bb%8d" class="heading-mark">
 &lt;svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">&lt;path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z">&lt;/path>&lt;/svg>
 &lt;/a>
&lt;/h2>&lt;p>启发式合并，顾名思义，就是根据人类直观的感受对已有算法的优化。譬如冰茶姬的启发式就是对于两个大小不一样的集合，我们大小小的并到大的，这样就可以有效地将冰茶姬的深度控制在 &lt;span class="katex">&lt;span class="katex-mathml">&lt;math xmlns="http://www.w3.org/1998/Math/MathML">&lt;semantics>&lt;mrow>&lt;mi>log&lt;/mi>&lt;mo>⁡&lt;/mo>&lt;mi>n&lt;/mi>&lt;/mrow>&lt;annotation encoding="application/x-tex">\log n&lt;/annotation>&lt;/semantics>&lt;/math>&lt;/span>&lt;span class="katex-html" aria-hidden="true">&lt;span class="base">&lt;span class="strut" style="height:0.8889em;vertical-align:-0.1944em;">&lt;/span>&lt;span class="mop">lo&lt;span style="margin-right:0.01389em;">g&lt;/span>&lt;/span>&lt;span class="mspace" style="margin-right:0.1667em;">&lt;/span>&lt;span class="mord mathnormal">n&lt;/span>&lt;/span>&lt;/span>&lt;/span> 级别（或许这就是树上启发式合并中那个&amp;quot;dsu&amp;quot;的来历吧）。&lt;/p></description></item></channel></rss>